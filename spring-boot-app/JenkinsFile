pipeline {
  agent {
    docker {
      image 'sandesh030/ultimate-cicd:latest'
      args '--user root -v /var/run/docker/sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/sandesh300/End-to-End-CI-CD-Pipeline-Implementation.git'
      }
    }
    
    stage('Debug Info') {
      steps {
        sh '''
          echo "=== Debug Information ==="
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn --version
          echo "Current directory:"
          pwd
          ls -la
          echo "Docker info:"
          docker --version
          docker info
        '''
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'cd End-to-End-CI-CD-Pipeline-Implementation/spring-boot-app && mvn clean package'
      }
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.232.128.229:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd End-to-End-CI-CD-Pipeline-Implementation/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "sandesh030/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd End-to-End-CI-CD-Pipeline-Implementation/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh """
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
              docker push ${DOCKER_IMAGE}
              docker logout
            """
          }
        }
      }
    }
    
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "End-to-End-CI-CD-Pipeline-Implementation"
        GIT_USER_NAME = "sandesh300"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "bhujbalsandesh52@gmail.com"
            git config user.name "sandesh bhujbal"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
    
    stage('Cleanup') {
      steps {
        sh '''
          echo "Cleaning up Docker resources..."
          docker system prune -f || true
        '''
      }
    }
  }
}
