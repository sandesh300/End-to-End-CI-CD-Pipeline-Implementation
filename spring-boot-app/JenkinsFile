pipeline {
  agent {
    docker {
      image 'sandesh030/ultimate-cicd:latest'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/sandesh300/End-to-End-CI-CD-Pipeline-Implementation.git'
      }
    }
    
    stage('Debug Info') {
      steps {
        sh '''
          echo "=== Debug Information ==="
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn --version
          echo "Current directory:"
          pwd
          ls -la
          echo "Docker info:"
          docker --version
          echo "Checking if Docker daemon is accessible:"
          docker ps || echo "Docker daemon not accessible"
        '''
      }
    }
    
    stage('Build and Test') {
      steps {
        sh '''
          echo "Building Spring Boot application..."
          cd spring-boot-app
          mvn clean package -DskipTests=false
        '''
      }
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.232.128.229:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "sandesh030/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh '''
              cd spring-boot-app
              echo "Building Docker image: ${DOCKER_IMAGE}"
              docker build -t ${DOCKER_IMAGE} .
              
              echo "Logging into Docker Hub..."
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              
              echo "Pushing Docker image..."
              docker push ${DOCKER_IMAGE}
              
              echo "Logging out from Docker Hub..."
              docker logout
            '''
          }
        }
      }
    }
    
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "End-to-End-CI-CD-Pipeline-Implementation"
        GIT_USER_NAME = "sandesh300"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "bhujbalsandesh52@gmail.com"
            git config user.name "sandesh bhujbal"
            
            echo "Current build number: ${BUILD_NUMBER}"
            
            # Update the deployment file
            if [ -f "java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml" ]; then
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              
              # Check if there are any changes to commit
              if git diff --staged --quiet; then
                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              fi
              
              if ! git diff --staged --quiet; then
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
              else
                echo "No changes to commit"
              fi
            else
              echo "Warning: deployment.yml not found"
              ls -la java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/ || echo "Directory not found"
            fi
          '''
        }
      }
    }
    
    stage('Cleanup') {
      steps {
        sh '''
          echo "Cleaning up Docker resources..."
          docker system prune -f || true
        '''
      }
    }
  }
  
  post {
    failure {
      echo "Pipeline failed! Check the logs above for details."
    }
    success {
      echo "Pipeline completed successfully!"
    }
    always {
      sh '''
        echo "=== Final Cleanup ==="
        docker system df || true
      '''
    }
  }
}
